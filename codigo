import sys, os
import io
from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QPushButton,
                             QVBoxLayout, QFileDialog, QMessageBox, QHBoxLayout)
from PyQt5.QtGui import QPixmap, QImage, QPalette, QBrush, QLinearGradient, QColor, QMovie, QIcon, QFont
from PyQt5.QtCore import Qt, QSize
from PIL import Image
from rembg import remove

# Função para obter o caminho correto de recursos (imagens, ícones) tanto no modo normal quanto quando empacotado
def resource_path(relative_path):
    """Retorna o caminho absoluto para arquivos de recursos (funciona com PyInstaller)."""
    try:
        # Quando empacotado com PyInstaller, sys._MEIPASS aponta para a pasta temporária
        base_path = sys._MEIPASS
    except AttributeError:
        # No modo de desenvolvimento (script .py), base_path é o diretório atual
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

class RemovedorFundo(QWidget):
    def __init__(self):
        super().__init__()
        # Define o título da janela
        self.setWindowTitle("NoBG - Removedor de Fundo")
        # Define a posição e tamanho iniciais da janela: x=100, y=100, largura=1000, altura=700
        self.setGeometry(100, 100, 1000, 700)
        # Define o ícone da janela usando resource_path para localizar o arquivo correto
        self.setWindowIcon(QIcon(resource_path("icons/icone.ico")))
        # Centraliza a janela na tela do usuário
        self.centralizar_janela()
        # Aplica o gradiente de fundo à janela
        self.set_background_gradient()

        # Cria o layout principal vertical
        self.layout = QVBoxLayout()
        # Ajusta este widget para usar o layout criado
        self.setLayout(self.layout)

        # ========================================================
        # TOPO: Layout horizontal para logo + nome do aplicativo
        # ========================================================
        header_layout = QHBoxLayout()

        # QLabel para exibir o logo do app
        logo = QLabel()
        # Carrega o pixmap a partir do caminho de recurso, redimensiona mantendo proporção
        logo.setPixmap(
            QPixmap(resource_path("icons/logo.png")).scaled(
                80, 80, Qt.KeepAspectRatio, Qt.SmoothTransformation
            )
        )
        # Define um tamanho fixo para o widget logo (para evitar redimensionamento inesperado)
        logo.setFixedSize(70, 70)

        # QLabel para exibir o nome do aplicativo
        nome_app = QLabel("NoBG")
        # Define fonte Arial, tamanho 20, estilo negrito
        nome_app.setFont(QFont("Arial", 20, QFont.Bold))
        # Aplica estilo de cor e um pequeno espaçamento à esquerda
        nome_app.setStyleSheet("color: #333; padding-left: 3px;")

        # Adiciona o logo e o nome ao layout horizontal
        header_layout.addWidget(logo)
        header_layout.addWidget(nome_app)
        # Adiciona o layout de cabeçalho ao layout principal da janela
        self.layout.addLayout(header_layout)

        # ========================================================
        # Labels para exibir a imagem original e a imagem processada
        # ========================================================
        self.label_original = QLabel("Imagem original")
        self.label_processada = QLabel("Imagem sem fundo")
        for lbl in (self.label_original, self.label_processada):
            # Define tamanho fixo para cada label de imagem
            lbl.setFixedSize(300, 400)
            # Alinha o conteúdo (pixmap ou texto) ao centro
            lbl.setAlignment(Qt.AlignCenter)
            # Aplica estilo de borda, fundo branco, cantos arredondados e tamanho de fonte
            lbl.setStyleSheet("""
                border: 2px solid #aaa;
                background-color: #ffffff;
                border-radius: 10px;
                font-size: 14px;
            """)

        # Criação dos botões: Abrir, Remover Fundo, Salvar
        # Botão para abrir uma imagem
        self.botao_abrir = QPushButton("Abrir Imagem")
        # Define ícone para o botão "Abrir Imagem"
        self.botao_abrir.setIcon(QIcon(resource_path("icons/abrir.png")))

        # Botão para remover o fundo da imagem
        self.botao_remover = QPushButton("Remover Fundo")
        self.botao_remover.setIcon(QIcon(resource_path("icons/remover.png")))

        # Botão para salvar a imagem processada
        self.botao_salvar = QPushButton("Salvar Imagem")
        self.botao_salvar.setIcon(QIcon(resource_path("icons/salvar.png")))

        # Definição de estilo comum para todos os botões
        botao_estilo = """
            QPushButton {
                background-color: #6c63ff;
                color: white;
                padding: 10px;
                font-size: 14px;
                border-radius: 8px;
            }
            QPushButton:hover {
                background-color: #574b90;
            }
        """
        # Aplica o estilo a cada botão
        for btn in (self.botao_abrir, self.botao_remover, self.botao_salvar):
            btn.setStyleSheet(botao_estilo)

        # Conecta os botões às funções correspondentes
        self.botao_abrir.clicked.connect(self.selecionar_imagem)
        self.botao_remover.clicked.connect(self.remover_fundo)
        self.botao_salvar.clicked.connect(self.salvar_imagem)

        # Layout horizontal para os botões de ação
        botoes_layout = QHBoxLayout()
        botoes_layout.addWidget(self.botao_abrir)
        botoes_layout.addWidget(self.botao_remover)
        botoes_layout.addWidget(self.botao_salvar)
        # Adiciona o layout de botões ao layout principal
        self.layout.addLayout(botoes_layout)

        # ========================================================
        # Layout horizontal para exibir as labels de imagem lado a lado
        # ========================================================
        imagens_layout = QHBoxLayout()
        imagens_layout.addWidget(self.label_original)
        imagens_layout.addWidget(self.label_processada)
        self.layout.addLayout(imagens_layout)

        # ========================================================
        # Spinner (animação de carregamento) para mostrar durante o processamento
        # ========================================================
        self.spinner = QLabel()
        # Centraliza o spinner dentro do QLabel
        self.spinner.setAlignment(Qt.AlignCenter)
        # Define tamanho fixo para o spinner (64x64 pixels)
        self.spinner.setFixedSize(64, 64)
        # Carrega o GIF de loading usando resource_path
        self.spinner_movie = QMovie(resource_path("loading.gif"))
        # Atribui o QMovie ao QLabel
        self.spinner.setMovie(self.spinner_movie)
        # Inicialmente, o spinner fica invisível (só aparece ao processar)
        self.spinner.setVisible(False)
        # Adiciona o spinner ao layout principal abaixo das imagens
        self.layout.addWidget(self.spinner)

        # Botão de créditos (ícone de informação) no canto inferior direito
        self.botao_creditos = QPushButton()
        self.botao_creditos.setIcon(QIcon(resource_path("icons/info.png")))
        self.botao_creditos.setIconSize(QSize(20, 20))
        self.botao_creditos.setFixedSize(30, 30)
        self.botao_creditos.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
                border-radius: 5px;
            }
        """)
        # Conecta clique do botão de créditos à função mostrar_creditos
        self.botao_creditos.clicked.connect(self.mostrar_creditos)

        # Layout horizontal para posicionar o botão de créditos à direita
        creditos_layout = QHBoxLayout()
        creditos_layout.addStretch()  # 'empurra' o botão para a direita
        creditos_layout.addWidget(self.botao_creditos)
        self.layout.addLayout(creditos_layout)

        # Inicialmente, não há imagem carregada ou processada
        self.caminho_imagem = None  # Guarda o caminho da imagem selecionada
        self.imagem_resultado = None  # Guarda o resultado da remoção de fundo

    def centralizar_janela(self):
        """Centraliza a janela atualmente visível na tela do usuário."""
        frame_geo = self.frameGeometry()  # Obtém a geometria da janela
        centro_tela = QApplication.desktop().availableGeometry().center()  # Centro da área útil da tela
        frame_geo.moveCenter(centro_tela)  # Move o retângulo da janela para o centro da tela
        self.move(frame_geo.topLeft())  # Posiciona a janela

    def set_background_gradient(self):
        """Aplica um gradiente vertical de cores no fundo da janela."""
        palette = QPalette()
        gradient = QLinearGradient(0, 0, 0, 700)
        gradient.setColorAt(0.0, QColor("#dfe9f3"))  # Cor no topo
        gradient.setColorAt(1.0, QColor("#ffffff"))  # Cor na parte inferior
        palette.setBrush(QPalette.Window, QBrush(gradient))
        self.setAutoFillBackground(True)  # Permite pintar o fundo da janela
        self.setPalette(palette)  # Aplica a paleta configurada

    def selecionar_imagem(self):
        """Abre um diálogo para o usuário escolher uma imagem do disco."""
        caminho, _ = QFileDialog.getOpenFileName(
            self, "Escolher imagem", "", "Imagens (*.png *.jpg *.jpeg)"
        )
        if caminho:
            # Armazena o caminho da imagem selecionada
            self.caminho_imagem = caminho
            # Carrega a imagem em um QPixmap e redimensiona mantendo a proporção
            pixmap = QPixmap(caminho).scaled(300, 400, Qt.KeepAspectRatio)
            # Exibe a imagem original na label correspondente
            self.label_original.setPixmap(pixmap)
            # Limpa a label de imagem processada
            self.label_processada.clear()
            # Zera qualquer resultado anterior
            self.imagem_resultado = None

    def remover_fundo(self):
        """Processa a imagem selecionada e remove o fundo usando a biblioteca rembg."""
        if not self.caminho_imagem:
            # Se nenhum arquivo foi selecionado, exibe alerta
            QMessageBox.warning(self, "Atenção", "Selecione uma imagem primeiro.")
            return

        # Exibe o spinner de carregamento e inicia a animação
        self.spinner.setVisible(True)
        self.spinner_movie.start()
        QApplication.processEvents()  # Atualiza a interface para mostrar o spinner

        try:
            # Abre o arquivo de imagem em modo binário
            with open(self.caminho_imagem, "rb") as img:
                # Chama a função remove() da biblioteca rembg
                output = remove(img.read())
            # Converte o resultado para objeto PIL e depois para RGBA
            self.imagem_resultado = Image.open(io.BytesIO(output)).convert("RGBA")
            # Converte a saída binária para QImage
            qimg = QImage.fromData(output)
            # Cria QPixmap a partir do QImage e redimensiona
            pixmap = QPixmap.fromImage(qimg).scaled(300, 400, Qt.KeepAspectRatio)
            # Exibe a imagem sem fundo na label correspondente
            self.label_processada.setPixmap(pixmap)
        except Exception as e:
            # Se houver erro, exibe caixa de diálogo com mensagem de erro
            QMessageBox.critical(self, "Erro", str(e))
        finally:
            # Para o spinner e oculta-o
            self.spinner_movie.stop()
            self.spinner.setVisible(False)

    def salvar_imagem(self):
        """Abre um diálogo para o usuário escolher onde salvar a imagem processada."""
        if self.imagem_resultado:
            # Se houver resultado para salvar
            caminho, _ = QFileDialog.getSaveFileName(self, "Salvar como", "", "PNG (*.png)")
            if caminho:
                # Salva como PNG
                self.imagem_resultado.save(caminho, "PNG")
                QMessageBox.information(self, "Sucesso", "Imagem salva com sucesso!")
        else:
            # Se não há imagem processada para salvar
            QMessageBox.warning(self, "Nada para salvar", "Nenhuma imagem processada.")

    def mostrar_creditos(self):
        """Exibe um diálogo informando os créditos do aplicativo."""
        QMessageBox.information(self, "Créditos", "Desenvolvido por João Pedro Tavares")

# Ponto de entrada do aplicativo
if __name__ == "__main__":
    # Cria a aplicação PyQt
    app = QApplication(sys.argv)
    # Cria a janela principal
    janela = RemovedorFundo()
    # Exibe a janela
    janela.show()
    # Executa o loop de eventos
    sys.exit(app.exec_())
